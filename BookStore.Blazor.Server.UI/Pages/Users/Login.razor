@page "/users/login"
@inject IAuthenticationService _authenticationService
@inject NavigationManager _navigationManager

<h3>Login</h3>
@if(string.IsNullOrEmpty(Message) == false)
{
    <div class="alert alert-danger">
        <p>@Message</p>
    </div>
}
<div>
    <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="LoginModel.Email" />
            <ValidationMessage For="@(() => LoginModel.Email)" />
        </div>
        <div class="form-group">
            <label for="email">Password</label>
            <InputText type="password" class="form-control" @bind-Value="LoginModel.Password" />
            <ValidationMessage For="@(() => LoginModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>
</div>

@code {
    LoginUserDto LoginModel = new LoginUserDto();
    string Message = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            var response = await _authenticationService.AuthenticateAsync(LoginModel);
            
            if (response)
            {
                _navigationManager.NavigateTo("/");
            }

            Message = "Invalid credentials. Try again.";
        }
        catch (ApiException)
        {

        }
    }
}
