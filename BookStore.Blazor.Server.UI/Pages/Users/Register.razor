@page "/users/register"
@inject IClient _httpClient
@inject NavigationManager _navManager

<h3>Register New Account</h3>
@if(string.IsNullOrEmpty(Message) == false)
{
    <div class="alert alert-danger">
        <p>@Message</p>
    </div>
}

<div class="card-body">
    <EditForm 
        Model="RegistrationModel"     
        OnValidSubmit="HandleRegistration"
    >
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email" />
            <ValidationMessage For="@(() => RegistrationModel.Email)" />
        </div>
        <div class="form-group">
            <label for="email">First Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.FirstName" />
            <ValidationMessage For="@(() => RegistrationModel.FirstName)" />
        </div>
        <div class="form-group">
            <label for="email">Last Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.LastName" />
            <ValidationMessage For="@(() => RegistrationModel.LastName)" />
        </div>
        <div class="form-group">
            <label for="email">Password</label>
            <InputText type="password" class="form-control" @bind-Value="RegistrationModel.Password" />
            <ValidationMessage For="@(() => RegistrationModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary btn-block">Register</button>
    </EditForm>
</div>

@code {
    UserDto RegistrationModel = new UserDto
    {
        Role = "User"
    };
    string Message = string.Empty;

    private async Task HandleRegistration()
    {
        try
        {
            await _httpClient.RegisterAsync(RegistrationModel);
            _navManager.NavigateTo("/users/login");
        }
        catch (ApiException ex)
        {
            Message = ex.Response;
        }
    }
}