@page "/books/create/"
@attribute [Authorize(Roles = "Administrator")]
@inject IBooksService _booksService
@inject NavigationManager _navManager
@inject IAuthorsService _authorsService

<h3>Create</h3>

<EditForm Model="Book" OnValidSubmit="HandleBookCreate">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="title">Book Title</label>
        <InputText id="title" class="form-control" @bind-Value="Book.Title" />
    </div>
    <br>
    <div class="form-group">
        <label for="isbn">ISBN</label>
        <InputText id="isbn" class="form-control" @bind-Value="Book.Isbn" />
    </div>
    <br>
    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" class="form-control" @bind-Value="Book.Price" />
    </div>
    <br>
    <div class="form-group">
        <label for="year">Year</label>
        <InputNumber @bind-Value="Book.Year" class="form-control" id="year" />
        <ValidationMessage For="@(() => Book.Year)" />
    </div>
    <br />
    <div class="form-group">
        <label for="summary">Summary</label>
        <InputText id="summary" class="form-control" @bind-Value="Book.Summary" />
    </div>
    <br>
    <div class="form-group">
        <label for="author">Author</label>
        <InputSelect id="author" class="form-select" @bind-Value="Book.AuthorId">
            <option value="">-- Select Author --</option>
            @foreach (var author in Authors)
            {
                <option value="@author.Id">
                    @author.FirstName @author.LastName
                </option>
            }
        </InputSelect>
    </div>
    <br>
    <div class="form-group">
        <label>Book Cover Photo</label>
        <div>
            <InputFile OnChange="HandleFileSelected" />
            @if (!string.IsNullOrEmpty(img))
            {
                <img class="img-thumbnail" src="@img" width="100" height="100">
            }
            <p class="text-danger">@UploadFileWarning</p>
        </div>
    </div>
    <br />
    <button class="btn btn-primary" type="submit">
        <span class="oi oi-pencil"></span>
        Create Book
    </button>
    <button @onclick="BackToList" class="btn btn-outline-secondary" type="button">
        <span class="oi oi-media-skip-backward"></span>
        Back To List
    </button>
</EditForm>

@code {
    private BookCreateDto Book = new BookCreateDto();
    private List<AuthorReadOnlyDto> Authors = new();
    private string UploadFileWarning = string.Empty;
    private string img = string.Empty;
    private long maxFileSize = 1024 * 1024 * 5;

    protected override async Task OnInitializedAsync()
    {
        var response = await _authorsService.Get();
        if (response.Success)
        {
            Authors = response.Data;
        }
    }

    private async Task HandleBookCreate()
    {
        var response = await _booksService.Create(Book);
        if (response.Success)
        {
            _navManager.NavigateTo("/books");
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if (file.Size > maxFileSize)
            {
                UploadFileWarning = "Please select a valid image file (*.jpg | *.png)";

            }
            var ext = System.IO.Path.GetExtension(file.Name);
            if ((ext.ToLower().Contains("jpg") || ext.ToLower().Contains("png") || ext.ToLower().Contains("jpeg")) == false)
            {
                UploadFileWarning = "Please select a valid image file (*.jpg | *.png)";
                return;
            }
            var byteArray = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(byteArray);
            string imageType = file.ContentType;
            string base64String = Convert.ToBase64String(byteArray);

            Book.ImageData = base64String;
            Book.OriginalImageName = file.Name;
            img = $"data:{imageType}; base64, {base64String}";
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/books/");
    }
}
